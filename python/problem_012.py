"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
from math import sqrt
from utils import measure_execution_time


LIMIT = 500


def main():
    print("Problem 12")
    n = 0
    divisors = 0
    with measure_execution_time():
        while divisors <= LIMIT:
            n += 1
            divisors = calc_divisors(triangle_number(n))
    print(f"The first triangle number with over {LIMIT} divisors is {triangle_number(n)}")


def triangle_number(n):
    """Returns the nth triangle number

    See https://en.wikipedia.org/wiki/Triangular_number#Formula
    """
    return (n * (n + 1)) // 2


def calc_divisors(n):
    result = 2  # 1 and n are always divisors
    for d in range(2, int(sqrt(n)) + 1):
        if n % d == 0:
            result += 2  # both d and n % d are divisors
    return result


if __name__ == '__main__':
    main()
